<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet"    href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />

    <link href="../css/main.css" rel="stylesheet" />
    <title>Game Model One</title>
  </head>
  <body class="bg-gray-800 text-gray-900">
    <main>
      <div class="flex m-12 flex-row-reverse   items-center justify-around gap-4 flex-wrap"> 
        <h1 class="text-3xl text-slate-50 font-bold">Model One </h1>
        <div class="">
          <a
            href="/games"
            class="inline-flex items-center border border-indigo-300 px-3 py-1.5 rounded-md text-indigo-500 hover:bg-slate-200 bg-indigo-50"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              class="h-6 w-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 16l-4-4m0 0l4-4m-4 4h18"
              ></path>
            </svg>
            <span class="ml-1 font-bold text-lg">Back</span>
          </a>
        </div>
      </div>
      <div class=" mx-auto w-[98%] sm:w-[70%] sm:m-12 bg-gray-200 bg-opacity-10 p-3 rounded-lg">
        <form method="POST" action="/admin/create-game-modelOne" class="space-y-4">
          <div
            class="rounded-md border w-full border-indigo-500 bg-gray-500 p-2 shadow-md"
          >
            <label
              for="upload"
              class="flex flex-col items-center gap-1 text-white cursor-pointer"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-10 w-10 fill-white stroke-indigo-500"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                />
              </svg>
              <span id="span-image"  class ="span text-white font-mono">Upload Game Image</span>
            </label>
            <input id="upload" name="image" accept="image/*" type="file" class="hidden" />
          </div>
          <div>
            <label class="sr-only" for="name">Title</label>
            <input
              class="w-full bg-transparent focus:border-gray-300 focus:outline-none text-white rounded-lg placeholder:text-white border-gray-500 border-2 p-2 text-lg"
              placeholder="Game Title"
              type="text"
              name="title"
              id="name"
            />
          </div>

          <div>
            <label class="sr-only" for="message">Description Of Game</label>

            <textarea
              class="w-full bg-transparent placeholder:text-white focus:border-gray-300 focus:outline-none text-white rounded-lg border-gray-500 border-2 p-2 text-lg"
              placeholder="Description Of Game"
              rows="5"
              id="Description"
              name="description"
            ></textarea>
          </div>
          <div>
            <label
              for="jewelCount"
              class="block text-lg p-2 font-medium text-gray-100"
              >Jewel Count</label
            >
            <input
              type="number "
              id="jewelCount"
              name="jewelCount"
              placeholder="0"
              class="w-full bg-transparent focus:border-gray-300 focus:outline-none text-white rounded-lg border-gray-500 border-2 p-3 text-lg"
              required
            />
          </div>
          <div>
            <label
              for="isPaid"
              class="block text-lg p-2 font-medium text-gray-100"
              >Is Paid?</label
            >
            <select
              id="isPaid"
              name="isPaid"
              class="w-full bg-transparent focus:border-gray-300 focus:outline-none text-white rounded-lg border-gray-500 border-2 p-3 text-lg"
              required
            >
              <option value="true">Yes</option>
              <option value="false">No</option>
            </select>
          </div>
          <div id="items-container" class="flex items-center justify-center gap-4 flex-wrap"></div>
          <div class="flex flex-wrap items-center justify-between">
            <div class="mt-4">
              <button
                type="submit"
                class="inline-block w-full rounded-lg bg-black px-5 py-3 font-medium text-white sm:w-auto"
              >
                Create Game
              </button>
            </div>

        
          </div>
        </form> 
        <div class=" flex justify-end items-center  m-4 cursor-pointer">
          <div class="flex justify-center sm:justify-end">
            <button
              type="button"
              class="text-slate-900 font-bold bg-yellow-400 hover:bg-yellow-500 focus:outline-none focus:ring-4 focus:ring-yellow-300 rounded-full text-lg px-5 py-2.5 text-center me-2 mb-2 dark:focus:ring-yellow-900"
              data-toggle="modal"
              data-target="#addAnalyticsModal"
            >
              Add Question
            </button>
          </div>
        </div>
      </div>
      <div
      class="modal fade"
      id="addAnalyticsModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="addAnalyticsModalLabel"
      aria-hidden="true"
    >
    <di id="form_question" class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="p-3 gap-4 flex flex-col">
          <div class="rounded-md border p-1 w-full border-indigo-500 bg-gray-700 shadow-md">
            <label for="upload-question" class="flex flex-col items-center gap-2 text-white cursor-pointer">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 fill-white stroke-indigo-500" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span id="span-1" class="status-span text-white font-mono">Upload Question Image</span>
            </label>
            <input id="upload-question" accept="image/*"  name="question" type="file" class="hidden" />
          </div>
      
          <div class="rounded-md border p-1 w-full border-indigo-500 bg-gray-700 shadow-md">
            <label for="upload-answer" class="flex flex-col items-center gap-2 text-white cursor-pointer">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 fill-white stroke-indigo-500" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span id="span-2" class="status-span text-white font-mono">Upload Answer Image</span>
            </label>
            <input id="upload-answer" accept="image/*"  name="answer" type="file" class="hidden" />
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="submit" id="uploadButton" class="btn btn-primary">Add Question</button>
        </div>
      </div>
    </div>
    
        </div>
      </div>
    </main>  
    <script> 
  const uploadedImages = [];

  const fileInputs = document.querySelectorAll('input[type="file"]');
  
  fileInputs.forEach((input) => {
    input.addEventListener('change', () => {
      const file = input.files[0];
      const span = document.querySelector(`label[for="${input.id}"] .status-span`);

      if (file) {
        // Display the file name and size
        span.textContent = `Selected file: ${file.name}, Size: ${file.size} bytes`;

        // Optionally, you can display a preview for image files
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          
          reader.onload = (e) => {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.style.maxWidth = '200px'; // Adjust as needed
            img.style.marginTop = '10px';
            span.appendChild(img);
          };
          
          reader.readAsDataURL(file);
        }
      } else {
        span.textContent = 'No file selected.';
      }
    });
  });
 
  const form = document.getElementById('uploadButton');

form.addEventListener('click', (e) => {
  e.preventDefault(); // Prevent the default form submission

  const formData = new FormData();
  const questionInput = document.getElementById('upload-question');
  const answerInput = document.getElementById('upload-answer');
const span1 =document.getElementById('span-1');
const span2 =document.getElementById('span-2');
  if (questionInput.files[0]) {
    formData.append('question', questionInput.files[0]);
  
  }

  if (answerInput.files[0]) {
    formData.append('answer', answerInput.files[0]);
  
  }

  span1.innerHTML = 'Uploading...';
  span2.innerHTML = 'Uploading...';

  console.log('FormData:', formData); // Log the FormData object


  fetch('https://hani-server-3qfo.onrender.com/admin/upload-question', {
    method: 'POST',
    body: formData,
  })
  .then(response => response.json())
  .then(data => { 
    span1.innerHTML = 'Upload Question Image'
    span2.innerHTML = ' Upload Answer Image';
    console.log('Success:', data .data ); 
uploadedImages.push(data.data);
renderImages();
  })
  .catch((error) => { 
    span1.innerHTML = 'faild to upload';
    span2.innerHTML = 'faild to upload';
    console.error('Error:', error);
  });
}); 

function renderImages() {
  const container = document.getElementById('items-container');
  container.innerHTML = ''; // Clear existing content
  
  uploadedImages.forEach((item ,idx) => {
    const card = document.createElement('div');
    card.className = 'col-md-4 mb-4';
    card.innerHTML = `<div class="bg-white rounded-lg shadow-md p-4 flex gap-4"> 
      <h2 class ="text-2xl text-center px-3 bg-gray-200 rounded-md ">${idx}</h2>
  <div class="flex-1">
    <h5 class="card-title text-center">Question Image</h5>
    <img src="${item.question}" class="w-24 h-24 rounded-full object-cover mx-auto" alt="Question Image">
    <input type="text" name="question" class="form-control mt-2 mb-2 w-full" value="${item.question}" placeholder="Edit Question URL">
  </div>
  <div class="flex-1">
    <h5 class="card-title text-center">Answer Image</h5>
    <img src="${item.answer}" class="w-24 h-24 rounded-full object-cover mx-auto" alt="Answer Image">
    <input type="text" name="answer" class="form-control mt-2 mb-2 w-full" value="${item.answer}" placeholder="Edit Answer URL">
  </div>
</div>
`;
    container.appendChild(card);
  });
}
 

const GameImage = document.getElementById('upload') 
const spanImage = document.getElementById('span-image')
GameImage.addEventListener('change', (e) => { 
  const file = e.target.files[0];
  if (file) {
    // Display the file name
    spanImage.innerText = file.name;
  }


});
    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src=".../js/main.js"></script>
  </body>
</html>
